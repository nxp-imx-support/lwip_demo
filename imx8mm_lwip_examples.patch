diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/CMakeLists.txt b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/CMakeLists.txt
new file mode 100644
index 000000000..ff96e6bbb
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/CMakeLists.txt
@@ -0,0 +1,110 @@
+# CROSS COMPILER SETTING
+SET(CMAKE_SYSTEM_NAME Generic)
+CMAKE_MINIMUM_REQUIRED (VERSION 3.1.1)
+
+# THE VERSION NUMBER
+SET (Tutorial_VERSION_MAJOR 1)
+SET (Tutorial_VERSION_MINOR 0)
+
+# ENABLE ASM
+ENABLE_LANGUAGE(ASM)
+
+SET(CMAKE_STATIC_LIBRARY_PREFIX)
+SET(CMAKE_STATIC_LIBRARY_SUFFIX)
+
+SET(CMAKE_EXECUTABLE_LIBRARY_PREFIX)
+SET(CMAKE_EXECUTABLE_LIBRARY_SUFFIX)
+
+# CURRENT DIRECTORY
+SET(ProjDirPath ${CMAKE_CURRENT_SOURCE_DIR})
+
+SET(EXECUTABLE_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LIBRARY_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LWIP_DIR ${ProjDirPath}/../../../../../../middleware/lwip)
+SET(LWIP_CONTRIB_DIR ${LWIP_DIR}/contrib)
+SET(LWIP_INCLUDE_DIRS
+    "${LWIP_DIR}/src/include"
+    "${LWIP_DIR}/port"
+    "${LWIP_DIR}/port/arch"
+    "${ProjDirPath}/../include"
+    "${LWIP_DIR}/src/apps/mqtt"
+    )
+
+include(${LWIP_DIR}/src/Filelists.cmake)
+
+project(lwip_mqtt_bm)
+
+set(MCUX_SDK_PROJECT_NAME lwip_mqtt_bm.elf)
+
+include(${ProjDirPath}/flags.cmake)
+
+include(${ProjDirPath}/config.cmake)
+
+add_executable(${MCUX_SDK_PROJECT_NAME}
+"${ProjDirPath}/../lwip_mqtt_bm.c"
+"${ProjDirPath}/../mqtt_example.c"
+"${ProjDirPath}/../mqtt_example.h"
+"${ProjDirPath}/../pin_mux.c"
+"${ProjDirPath}/../pin_mux.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.h"
+${lwipcore_SRCS}
+${lwipcore4_SRCS}
+"${LWIP_DIR}/port/enetif.c"
+"${LWIP_DIR}/port/enetif.h"
+"${LWIP_DIR}/src/apps/mqtt/mqtt.c"
+)
+
+target_include_directories(${MCUX_SDK_PROJECT_NAME} PRIVATE
+    ${ProjDirPath}/..
+    ${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/
+    ${LWIP_INCLUDE_DIRS}
+)
+
+set(CMAKE_MODULE_PATH
+    ${ProjDirPath}/../../../../../../core/
+    ${ProjDirPath}/../../../../../../core/drivers/enet/
+    ${ProjDirPath}/../../../../../../core/components/phy/device/phyar8031/
+    ${ProjDirPath}/../../../../../../core/components/phy/
+    ${ProjDirPath}/../../../../../../core/components/phy/mdio/enet/
+)
+
+#Include Entry cmake component
+include(all_devices)
+
+# include modules
+include(driver_mdio-enet)
+include(driver_phy-device-ar8031)
+include(utility_debug_console_lite)
+include(utility_assert_lite)
+include(driver_clock)
+include(driver_enet)
+include(driver_common)
+include(driver_rdc)
+include(device_CMSIS)
+include(component_iuart_adapter)
+include(component_lists)
+include(driver_iuart)
+include(device_startup)
+include(driver_igpio)
+include(driver_mdio-common)
+include(CMSIS_Include_core_cm)
+include(driver_phy-common)
+include(utilities_misc_utilities)
+include(device_system)
+include(driver_gpt)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--start-group)
+
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE m)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE c)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE gcc)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE nosys)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE lwipcore)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--end-group)
+
+ADD_CUSTOM_COMMAND(TARGET ${MCUX_SDK_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY}
+-Obinary ${EXECUTABLE_OUTPUT_PATH}/${MCUX_SDK_PROJECT_NAME} ${EXECUTABLE_OUTPUT_PATH}/lwip_mqtt_bm.bin)
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
new file mode 100644
index 000000000..dbd6a7631
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
@@ -0,0 +1,226 @@
+/*
+** ###################################################################
+**     Processors:          MIMX8MM6CVTKZ
+**                          MIMX8MM6DVTLZ
+**
+**     Compiler:            GNU C Compiler
+**     Reference manual:    MX8MMRM, Rev. 0, 02/2019
+**     Version:             rev. 4.0, 2019-02-18
+**     Build:               b200330
+**
+**     Abstract:
+**         Linker file for the GNU C Compiler
+**
+**     Copyright 2016 Freescale Semiconductor, Inc.
+**     Copyright 2016-2020 NXP
+**     All rights reserved.
+**
+**     SPDX-License-Identifier: BSD-3-Clause
+**
+**     http:                 www.nxp.com
+**     mail:                 support@nxp.com
+**
+** ###################################################################
+*/
+
+/* Entry Point */
+ENTRY(Reset_Handler)
+
+HEAP_SIZE  = DEFINED(__heap_size__)  ? __heap_size__  : 0x0400;
+STACK_SIZE = DEFINED(__stack_size__) ? __stack_size__ : 0x0400;
+
+/* Specify the memory areas */
+MEMORY
+{
+  m_interrupts          (RX)  : ORIGIN = 0x1FFE0000, LENGTH = 0x00000240
+  m_text                (RX)  : ORIGIN = 0x1FFE0240, LENGTH = 0x0001FDC0
+  m_data                (RW)  : ORIGIN = 0x20000000, LENGTH = 0x00020000
+  m_data2               (RW)  : ORIGIN = 0x80000000, LENGTH = 0x01000000
+}
+
+/* Define output sections */
+SECTIONS
+{
+/* The startup code goes first into internal RAM */
+  .interrupts :
+  {
+    __VECTOR_TABLE = .;
+    __Vectors = .;
+    . = ALIGN(4);
+    KEEP(*(.isr_vector))     /* Startup code */
+    . = ALIGN(4);
+  } > m_interrupts
+
+  .resource_table :
+  {
+    . = ALIGN(8);
+    KEEP(*(.resource_table)) /* Resource table */
+    . = ALIGN(8);
+  } > m_text
+
+  /* The program code and other data goes into internal RAM */
+  .text :
+  {
+    . = ALIGN(4);
+    *(.text)                 /* .text sections (code) */
+    *(.text*)                /* .text* sections (code) */
+    *(.rodata)               /* .rodata sections (constants, strings, etc.) */
+    *(.rodata*)              /* .rodata* sections (constants, strings, etc.) */
+    *(.glue_7)               /* glue arm to thumb code */
+    *(.glue_7t)              /* glue thumb to arm code */
+    *(.eh_frame)
+    KEEP (*(.init))
+    KEEP (*(.fini))
+    . = ALIGN(4);
+  } > m_text
+
+  .ARM.extab :
+  {
+    *(.ARM.extab* .gnu.linkonce.armextab.*)
+  } > m_text
+
+  .ARM :
+  {
+    __exidx_start = .;
+    *(.ARM.exidx*)
+    __exidx_end = .;
+  } > m_text
+
+ .ctors :
+  {
+    __CTOR_LIST__ = .;
+    /* gcc uses crtbegin.o to find the start of
+       the constructors, so we make sure it is
+       first.  Because this is a wildcard, it
+       doesn't matter if the user does not
+       actually link against crtbegin.o; the
+       linker won't look for a file to match a
+       wildcard.  The wildcard also means that it
+       doesn't matter which directory crtbegin.o
+       is in.  */
+    KEEP (*crtbegin.o(.ctors))
+    KEEP (*crtbegin?.o(.ctors))
+    /* We don't want to include the .ctor section from
+       from the crtend.o file until after the sorted ctors.
+       The .ctor section from the crtend file contains the
+       end of ctors marker and it must be last */
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors))
+    KEEP (*(SORT(.ctors.*)))
+    KEEP (*(.ctors))
+    __CTOR_END__ = .;
+  } > m_text
+
+  .dtors :
+  {
+    __DTOR_LIST__ = .;
+    KEEP (*crtbegin.o(.dtors))
+    KEEP (*crtbegin?.o(.dtors))
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors))
+    KEEP (*(SORT(.dtors.*)))
+    KEEP (*(.dtors))
+    __DTOR_END__ = .;
+  } > m_text
+
+  .preinit_array :
+  {
+    PROVIDE_HIDDEN (__preinit_array_start = .);
+    KEEP (*(.preinit_array*))
+    PROVIDE_HIDDEN (__preinit_array_end = .);
+  } > m_text
+
+  .init_array :
+  {
+    PROVIDE_HIDDEN (__init_array_start = .);
+    KEEP (*(SORT(.init_array.*)))
+    KEEP (*(.init_array*))
+    PROVIDE_HIDDEN (__init_array_end = .);
+  } > m_text
+
+  .fini_array :
+  {
+    PROVIDE_HIDDEN (__fini_array_start = .);
+    KEEP (*(SORT(.fini_array.*)))
+    KEEP (*(.fini_array*))
+    PROVIDE_HIDDEN (__fini_array_end = .);
+  } > m_text
+
+  __etext = .;    /* define a global symbol at end of code */
+  __DATA_ROM = .; /* Symbol is used by startup for data initialization */
+
+  .data : AT(__DATA_ROM)
+  {
+    . = ALIGN(4);
+    __DATA_RAM = .;
+    __data_start__ = .;      /* create a global symbol at data start */
+    *(.data)                 /* .data sections */
+    *(.data*)                /* .data* sections */
+    KEEP(*(.jcr*))
+    . = ALIGN(4);
+    __data_end__ = .;        /* define a global symbol at data end */
+  } > m_data
+
+  __CACHE_REGION_START = ORIGIN(m_interrupts);
+  __CACHE_REGION_SIZE  = 0;
+  __NDATA_ROM = __DATA_ROM + SIZEOF(.data); /* Symbol is used by startup for ncache data initialization */
+
+  .ncache.init : AT(__NDATA_ROM)
+  {
+    __noncachedata_start__ = .;   /* create a global symbol at ncache data start */
+    *(NonCacheable.init)
+    . = ALIGN(4);
+    __noncachedata_init_end__ = .;   /* create a global symbol at initialized ncache data end */
+  } > m_data2
+
+  . = __noncachedata_init_end__;
+  .ncache :
+  {
+    *(NonCacheable)
+    . = ALIGN(4);
+    __noncachedata_end__ = .;     /* define a global symbol at ncache data end */
+  } > m_data2
+
+  __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);
+  text_end = ORIGIN(m_text) + LENGTH(m_text);
+  ASSERT(__DATA_END <= text_end, "region m_text overflowed with text and data")
+
+  /* Uninitialized data section */
+  .bss :
+  {
+    /* This is used by the startup in order to initialize the .bss section */
+    . = ALIGN(4);
+    __START_BSS = .;
+    __bss_start__ = .;
+    *(.bss)
+    *(.bss*)
+    *(COMMON)
+    . = ALIGN(4);
+    __bss_end__ = .;
+    __END_BSS = .;
+  } > m_data
+
+  .heap :
+  {
+    . = ALIGN(8);
+    __end__ = .;
+    PROVIDE(end = .);
+    __HeapBase = .;
+    . += HEAP_SIZE;
+    __HeapLimit = .;
+    __heap_limit = .; /* Add for _sbrk */
+  } > m_data
+
+  .stack :
+  {
+    . = ALIGN(8);
+    . += STACK_SIZE;
+  } > m_data
+
+  /* Initializes stack on the end of block */
+  __StackTop   = ORIGIN(m_data) + LENGTH(m_data);
+  __StackLimit = __StackTop - STACK_SIZE;
+  PROVIDE(__stack = __StackTop);
+
+  .ARM.attributes 0 : { *(.ARM.attributes) }
+
+  ASSERT(__StackLimit >= __HeapLimit, "region m_data overflowed with stack and heap")
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_debug.sh b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_debug.sh
new file mode 100755
index 000000000..6db0796c3
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_debug.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=debug  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_release.sh b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_release.sh
new file mode 100755
index 000000000..0aa00d162
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/build_release.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=release  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/clean.sh b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/clean.sh
new file mode 100755
index 000000000..795ad8716
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/clean.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+rm -rf debug release CMakeFiles
+rm -rf Makefile cmake_install.cmake CMakeCache.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/config.cmake b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/config.cmake
new file mode 100644
index 000000000..37925c858
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/config.cmake
@@ -0,0 +1,5 @@
+# config to select component, the format is CONFIG_USE_${component}
+set(CONFIG_USE_driver_iuart true)
+set(CONFIG_USE_middleware_baremetal true)
+set(CONFIG_USE_soem_ifport_enet true)
+set(MCUX_DEVICE "MIMX8MM6")
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/flags.cmake b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/flags.cmake
new file mode 100644
index 000000000..8732cbdfa
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/armgcc/flags.cmake
@@ -0,0 +1,181 @@
+SET(CMAKE_ASM_FLAGS_DEBUG " \
+    ${CMAKE_ASM_FLAGS_DEBUG} \
+    -DDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_ASM_FLAGS_RELEASE " \
+    ${CMAKE_ASM_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_C_FLAGS_DEBUG " \
+    ${CMAKE_C_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_C_FLAGS_RELEASE " \
+    ${CMAKE_C_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_CXX_FLAGS_DEBUG " \
+    ${CMAKE_CXX_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_CXX_FLAGS_RELEASE " \
+    ${CMAKE_CXX_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_DEBUG " \
+    ${CMAKE_EXE_LINKER_FLAGS_DEBUG} \
+    -g \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_RELEASE " \
+    ${CMAKE_EXE_LINKER_FLAGS_RELEASE} \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/include/lwipopts.h b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/include/lwipopts.h
new file mode 100644
index 000000000..0a435277f
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/include/lwipopts.h
@@ -0,0 +1,103 @@
+/**
+ ******************************************************************************
+ * @file    lwipopts.h
+ * This file is based on /src/include/lwip/opt.h
+ ******************************************************************************
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef LWIP_LWIPOPTS_H
+#define LWIP_LWIPOPTS_H
+
+/**
+ * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
+ * critical regions during buffer allocation, deallocation and memory
+ * allocation and deallocation.
+ */
+#define SYS_LIGHTWEIGHT_PROT            0
+/**
+ * NO_SYS==1: Bare metal lwIP
+ */
+#define NO_SYS                          1
+
+#define LWIP_TIMERS                     1
+
+extern struct netif netif_mini;
+#define LWIP_HOOK_IP4_ROUTE_SRC(src, dest) &netif_mini
+/**
+ * LWIP_NETCONN==0: Disable Netconn API (require to use api_lib.c)
+ */
+#define LWIP_NETCONN                    0
+/**
+ * LWIP_SOCKET==0: Disable Socket API (require to use sockets.c)
+ */
+#define LWIP_SOCKET                     0
+
+/* ---------- Memory options ---------- */
+/**
+ * MEM_ALIGNMENT: should be set to the alignment of the CPU
+ *    4 byte alignment -> #define MEM_ALIGNMENT 4
+ *    2 byte alignment -> #define MEM_ALIGNMENT 2
+ */
+#define MEM_ALIGNMENT                   4
+/**
+ * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts
+ * Needed for MQTT example
+ */
+#define MEMP_NUM_SYS_TIMEOUT            30
+
+/* ---------- Pbuf options ------------ */
+/* PBUF_POOL_SIZE: the number of buffers in the pbuf pool. */
+#ifndef PBUF_POOL_SIZE
+#define PBUF_POOL_SIZE                  5
+#endif
+
+/* ---------- TCP options ------------- */
+#ifndef LWIP_TCP
+#define LWIP_TCP                        1
+#endif
+
+#ifndef TCP_TTL
+#define TCP_TTL                         255
+#endif
+
+/* Controls if TCP should queue segments that arrive out of
+   order. Define to 0 if your device is low on memory. */
+#ifndef TCP_QUEUE_OOSEQ
+#define TCP_QUEUE_OOSEQ                 1
+#endif
+
+/* IP options */
+#define IP_REASS_MAXAGE                 5
+#define IP_REASS_MAX_PBUFS              5
+
+/* ---------- ICMP options --------- */
+#ifndef LWIP_ICMP
+#define LWIP_ICMP                       1
+#endif
+
+/* ---------- RAW options ---------- */
+#if !defined LWIP_RAW
+#define LWIP_RAW                        1
+#endif
+
+/* ---------- UDP options ---------- */
+#ifndef LWIP_UDP
+#define LWIP_UDP                        1
+#endif
+#ifndef UDP_TTL
+#define UDP_TTL                         255
+#endif
+
+/* -------- Statistics options ------ */
+#ifndef LWIP_STATS
+#define LWIP_STATS                      0
+#endif
+#ifndef LWIP_PROVIDE_ERRNO
+#define LWIP_PROVIDE_ERRNO              1
+#endif
+
+#endif /* LWIP_LWIPOPTS_H */
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/lwip_mqtt_bm.c b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/lwip_mqtt_bm.c
new file mode 100644
index 000000000..45b56e23e
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/lwip_mqtt_bm.c
@@ -0,0 +1,229 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*******************************************************************************
+ * Includes
+ ******************************************************************************/
+
+#include "pin_mux.h"
+#include "fsl_gpio.h"
+#include "board.h"
+
+#include "fsl_phyar8031.h"
+#include <lwipopts.h>
+#include <lwip/timeouts.h>
+#include "enetif.h"
+#include "mqtt_example.h"
+#include "mqtt_example.c"
+
+/*******************************************************************************
+ * Definitions
+ ******************************************************************************/
+
+/* IP address configuration. */
+#ifndef configIP_ADDR0
+#define configIP_ADDR0      192
+#endif
+#ifndef configIP_ADDR1
+#define configIP_ADDR1      168
+#endif
+#ifndef configIP_ADDR2
+#define configIP_ADDR2      11
+#endif
+#ifndef configIP_ADDR3
+#define configIP_ADDR3      3
+#endif
+
+/* Netmask configuration. */
+#ifndef configNET_MASK0
+#define configNET_MASK0     255
+#endif
+#ifndef configNET_MASK1
+#define configNET_MASK1     255
+#endif
+#ifndef configNET_MASK2
+#define configNET_MASK2     255
+#endif
+#ifndef configNET_MASK3
+#define configNET_MASK3     0
+#endif
+
+/* Gateway address configuration. */
+#ifndef configGW_ADDR0
+#define configGW_ADDR0      192
+#endif
+#ifndef configGW_ADDR1
+#define configGW_ADDR1      168
+#endif
+#ifndef configGW_ADDR2
+#define configGW_ADDR2      11
+#endif
+#ifndef configGW_ADDR3
+#define configGW_ADDR3      1
+#endif
+
+/* MAC address configuration. */
+#ifndef configMAC_ADDR0
+#define configMAC_ADDR0     0x00
+#endif
+#ifndef configMAC_ADDR1
+#define configMAC_ADDR1     0x04
+#endif
+#ifndef configMAC_ADDR2
+#define configMAC_ADDR2     0x9F
+#endif
+#ifndef configMAC_ADDR3
+#define configMAC_ADDR3     0x05
+#endif
+#ifndef configMAC_ADDR4
+#define configMAC_ADDR4     0xCF
+#endif
+#ifndef configMAC_ADDR5
+#define configMAC_ADDR5     0xFC
+#endif
+
+#define OSEM_PORT_NAME          "enet"
+#define OSEM_PORT               ENET
+#define PHY_ADDRESS             0x00u
+#define ENET_CLOCK_FREQ         250000000
+
+#define EXAMPLE_PHY_INTERFACE_RGMII
+#ifndef PHY_AUTONEGO_TIMEOUT_COUNT
+#define PHY_AUTONEGO_TIMEOUT_COUNT (100000)
+#endif
+#ifndef PHY_STABILITY_DELAY_US
+#define PHY_STABILITY_DELAY_US (0U)
+#endif
+
+/* please change this according to your MAC */
+uint8_t myMAC[6] = { configMAC_ADDR0, configMAC_ADDR1, configMAC_ADDR2, configMAC_ADDR3, configMAC_ADDR4, configMAC_ADDR5 };
+
+void ethernetif_config()
+{
+    memset(&if_port, 0, sizeof(if_port));
+    if_port.mdioHandle.ops = &enet_ops;
+    if_port.phyHandle.ops = &phyar8031_ops;
+    if_port.bufferConfig = buffConfig;
+    if_port.base = OSEM_PORT;
+/* The miiMode should be set according to the different PHY interfaces. */
+#ifdef EXAMPLE_PHY_INTERFACE_RGMII
+    if_port.mii_mode = kENET_RgmiiMode;
+#else
+    if_port.mii_mode = kENET_RmiiMode;
+#endif
+    if_port.phy_config.autoNeg = true;
+    if_port.phy_config.phyAddr = PHY_ADDRESS;
+    if_port.srcClock_Hz = ENET_CLOCK_FREQ;
+    if_port.phy_autonego_timeout_count = PHY_AUTONEGO_TIMEOUT_COUNT;
+    if_port.phy_stability_delay_us = PHY_STABILITY_DELAY_US;
+}
+
+struct netif netif_mini;
+
+static err_t netif_set_opts(struct netif *netif) {
+  netif->linkoutput = netif_output;
+  netif->output     = etharp_output;
+  netif->mtu        = 1500;
+  netif->flags      = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET;
+  netif->hwaddr_len = 6;
+  netif->hwaddr[0] = configMAC_ADDR0;
+  netif->hwaddr[1] = configMAC_ADDR1;
+  netif->hwaddr[2] = configMAC_ADDR2;
+  netif->hwaddr[3] = configMAC_ADDR3;
+  netif->hwaddr[4] = configMAC_ADDR4;
+  netif->hwaddr[5] = configMAC_ADDR5;
+
+  return ERR_OK;
+}
+
+/*!
+ * @brief Main function.
+ */
+
+extern mqtt_client_t *mqtt_client;
+extern const struct mqtt_connect_client_info_t mqtt_client_info;
+
+int main(void)
+{
+    ip4_addr_t netif_ipaddr;
+    ip4_addr_t netif_netmask;
+    ip4_addr_t netif_gw;
+
+    /* Hardware Initialization. */
+    BOARD_InitMemory();
+    BOARD_RdcInit();
+    BOARD_InitPins();
+    BOARD_BootClockRUN();
+    BOARD_InitDebugConsole();
+
+    CLOCK_SetRootDivider(kCLOCK_RootEnetAxi, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetAxi, kCLOCK_EnetAxiRootmuxSysPll2Div4); /* SYSTEM PLL2 divided by 4: 250Mhz */
+
+    /* Time stamp clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetTimer, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetTimer, kCLOCK_EnetTimerRootmuxSysPll2Div10); /* SYSTEM PLL2 divided by 10: 100Mhz */
+
+    /* mii/rgmii interface clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetRef, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetRef, kCLOCK_EnetRefRootmuxSysPll2Div8); /* SYSTEM PLL2 divided by 8: 125MHz */
+
+    gpio_pin_config_t gpio_config = {kGPIO_DigitalOutput, 0, kGPIO_NoIntmode};
+
+    /* PHY reset pin */
+    GPIO_PinInit(GPIO4, 22, &gpio_config);
+
+    /* PHY reset */
+    GPIO_WritePinOutput(GPIO4, 22, 0);
+    SDK_DelayAtLeastUs(10000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+    GPIO_WritePinOutput(GPIO4, 22, 1);
+    SDK_DelayAtLeastUs(30000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+
+    /* used by TCP */
+    osal_timer_init();
+
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done1_IRQn);
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done2_IRQn);
+
+    IP4_ADDR(&netif_ipaddr, configIP_ADDR0, configIP_ADDR1, configIP_ADDR2, configIP_ADDR3);
+    IP4_ADDR(&netif_netmask, configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3);
+    IP4_ADDR(&netif_gw, configGW_ADDR0, configGW_ADDR1, configGW_ADDR2, configGW_ADDR3);
+
+    ethernetif_config();
+    ethernetif_init(myMAC);
+
+    printf("Ethernet initialization done!\n");
+
+    lwip_init();
+
+    netif_add(&netif_mini, &netif_ipaddr, &netif_netmask, &netif_gw, NULL, netif_set_opts, netif_input);
+
+    netif_set_default(&netif_mini);
+    netif_set_up(&netif_mini);
+
+    printf("MQTT example starts\n");
+    mqtt_example_init();
+    /* must be called repeatedly in bare-metal implementations */
+    while(1) {
+        if (connected == 1 && !subscribed) {
+             mqtt_sub_unsub(mqtt_client,
+                            "topic_qos1", 1,
+                            mqtt_request_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
+                            1);
+
+            mqtt_sub_unsub(mqtt_client,
+                            "topic_qos0", 0,
+                            mqtt_request_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
+                            1);
+            subscribed = 1;
+        }
+        ethernetif_receive(&netif_mini);
+        sys_check_timeouts();
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.c b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.c
new file mode 100644
index 000000000..3714d94e0
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.c
@@ -0,0 +1,144 @@
+/*
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+ * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+ * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+ * OF SUCH DAMAGE.
+ *
+ *
+ * Author: Dirk Ziegelmeier <dziegel@gmx.de>
+ *
+ */
+
+/*
+ * Copyright 2022 NXP
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include "lwip/apps/mqtt.h"
+#include "mqtt_example.h"
+
+#if LWIP_TCP
+
+/* Defined the IP address according to our use-case */
+#define LWIP_MQTT_EXAMPLE_IPADDR_INIT = IPADDR4_INIT(PP_HTONL((u32_t)0xC0A80B02UL)) /* 192.168.11.2 */
+
+/** Define this to a compile-time IP address initialization
+ * to connect anything else than IPv4 loopback
+ */
+#ifndef LWIP_MQTT_EXAMPLE_IPADDR_INIT
+#if LWIP_IPV4
+#define LWIP_MQTT_EXAMPLE_IPADDR_INIT = IPADDR4_INIT(PP_HTONL(IPADDR_LOOPBACK))
+#else
+#define LWIP_MQTT_EXAMPLE_IPADDR_INIT
+#endif
+#endif
+
+ ip_addr_t mqtt_ip LWIP_MQTT_EXAMPLE_IPADDR_INIT;
+ mqtt_client_t* mqtt_client;
+
+const struct mqtt_connect_client_info_t mqtt_client_info =
+{
+  "test",
+  NULL, /* user */
+  NULL, /* pass */
+  100,  /* keep alive */
+  NULL, /* will_topic */
+  NULL, /* will_msg */
+  0,    /* will_qos */
+  0     /* will_retain */
+#if LWIP_ALTCP && LWIP_ALTCP_TLS
+  , NULL
+#endif
+};
+
+static void
+mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
+{
+  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
+  LWIP_UNUSED_ARG(data);
+
+  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" data cb: len %d, flags %d\n", client_info->client_id,
+          (int)len, (int)flags));
+}
+
+static void
+mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
+{
+  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
+
+  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" publish cb: topic %s, len %d\n", client_info->client_id,
+          topic, (int)tot_len));
+}
+
+void
+mqtt_request_cb(void *arg, err_t err)
+{
+  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
+
+  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" request cb: err %d\n", client_info->client_id, (int)err));
+}
+
+uint8_t subscribed = 0;
+uint8_t connected = 0;
+
+static void
+mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
+{
+  subscribed = 0;
+  connected = 0;
+
+  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
+  LWIP_UNUSED_ARG(client);
+
+  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" connection cb: status %d\n", client_info->client_id, (int)status));
+
+  if (status != MQTT_CONNECT_ACCEPTED) {
+    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
+    printf("mqtt_connection_cb: Trying to reconnect...\n");
+
+    mqtt_client_connect(mqtt_client,
+          &mqtt_ip, MQTT_PORT,
+          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
+          &mqtt_client_info);
+  }
+  else connected = 1;
+}
+#endif /* LWIP_TCP */
+
+void
+mqtt_example_init(void)
+{
+#if LWIP_TCP
+  mqtt_client = mqtt_client_new();
+
+  mqtt_set_inpub_callback(mqtt_client,
+          mqtt_incoming_publish_cb,
+          mqtt_incoming_data_cb,
+          LWIP_CONST_CAST(void*, &mqtt_client_info));
+
+  mqtt_client_connect(mqtt_client,
+          &mqtt_ip, MQTT_PORT,
+          mqtt_connection_cb, LWIP_CONST_CAST(void*, &mqtt_client_info),
+          &mqtt_client_info);
+
+#endif /* LWIP_TCP */
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.h b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.h
new file mode 100644
index 000000000..797678b2c
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/mqtt_example.h
@@ -0,0 +1,43 @@
+/*
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+ * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+ * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+ * OF SUCH DAMAGE.
+ *
+ * This file is part of the lwIP TCP/IP stack.
+ *
+ * Author: Dirk Ziegelmeier <dziegel@gmx.de>
+ *
+ */
+
+#ifndef MQTT_EXAMPLE_H
+#define MQTT_EXAMPLE_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void mqtt_example_init(void);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* MQTT_EXAMPLE_H */
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.c b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.c
new file mode 100644
index 000000000..e2aab85c5
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.c
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include "fsl_common.h"
+#include "fsl_iomuxc.h"
+#include "pin_mux.h"
+
+void BOARD_InitBootPins(void)
+{
+    BOARD_InitPins();
+}
+
+void BOARD_InitPins(void) {
+    IOMUXC_SetPinMux(IOMUXC_UART4_RXD_UART4_RX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_RXD_UART4_RX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+    IOMUXC_SetPinMux(IOMUXC_UART4_TXD_UART4_TX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_TXD_UART4_TX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDIO_ENET1_MDIO, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDIO_ENET1_MDIO,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDC_ENET1_MDC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDC_ENET1_MDC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD3_ENET1_RGMII_TD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD3_ENET1_RGMII_TD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD2_ENET1_RGMII_TD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD2_ENET1_RGMII_TD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD1_ENET1_RGMII_TD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD1_ENET1_RGMII_TD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD0_ENET1_RGMII_TD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD0_ENET1_RGMII_TD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD3_ENET1_RGMII_RD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD3_ENET1_RGMII_RD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD2_ENET1_RGMII_RD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD2_ENET1_RGMII_RD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD1_ENET1_RGMII_RD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD1_ENET1_RGMII_RD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD0_ENET1_RGMII_RD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD0_ENET1_RGMII_RD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TXC_ENET1_RGMII_TXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TXC_ENET1_RGMII_TXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RXC_ENET1_RGMII_RXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RXC_ENET1_RGMII_RXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_SAI2_RXC_GPIO4_IO22, 5U);
+    IOMUXC_SetPinConfig(IOMUXC_SAI2_RXC_GPIO4_IO22,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.h b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.h
new file mode 100644
index 000000000..68b6a81b4
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_mqtt/bm/pin_mux.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef _PIN_MUX_H_
+#define _PIN_MUX_H_
+
+#include "board.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+void BOARD_InitBootPins(void);
+
+void BOARD_InitPins(void);
+
+#if defined(__cplusplus)
+}
+#endif
+
+#endif /* _PIN_MUX_H_ */
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/CMakeLists.txt b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/CMakeLists.txt
new file mode 100644
index 000000000..19033c26d
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/CMakeLists.txt
@@ -0,0 +1,108 @@
+# CROSS COMPILER SETTING
+SET(CMAKE_SYSTEM_NAME Generic)
+CMAKE_MINIMUM_REQUIRED (VERSION 3.1.1)
+
+# THE VERSION NUMBER
+SET (Tutorial_VERSION_MAJOR 1)
+SET (Tutorial_VERSION_MINOR 0)
+
+# ENABLE ASM
+ENABLE_LANGUAGE(ASM)
+
+SET(CMAKE_STATIC_LIBRARY_PREFIX)
+SET(CMAKE_STATIC_LIBRARY_SUFFIX)
+
+SET(CMAKE_EXECUTABLE_LIBRARY_PREFIX)
+SET(CMAKE_EXECUTABLE_LIBRARY_SUFFIX)
+
+# CURRENT DIRECTORY
+SET(ProjDirPath ${CMAKE_CURRENT_SOURCE_DIR})
+
+SET(EXECUTABLE_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LIBRARY_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LWIP_DIR ${ProjDirPath}/../../../../../../middleware/lwip)
+SET(LWIP_CONTRIB_DIR ${LWIP_DIR}/contrib)
+SET(LWIP_INCLUDE_DIRS
+    "${LWIP_DIR}/src/include"
+    "${LWIP_DIR}/port"
+    "${LWIP_DIR}/port/arch"
+    "${LWIP_CONTRIB_DIR}/apps/ping"
+    "${ProjDirPath}/../include"
+    )
+
+include(${LWIP_DIR}/src/Filelists.cmake)
+
+project(lwip_ping_bm)
+
+set(MCUX_SDK_PROJECT_NAME lwip_ping_bm.elf)
+
+include(${ProjDirPath}/flags.cmake)
+
+include(${ProjDirPath}/config.cmake)
+
+add_executable(${MCUX_SDK_PROJECT_NAME}
+"${ProjDirPath}/../lwip_ping_bm.c"
+"${ProjDirPath}/../pin_mux.c"
+"${ProjDirPath}/../pin_mux.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.h"
+${lwipcore_SRCS}
+${lwipcore4_SRCS}
+"${LWIP_DIR}/port/enetif.c"
+"${LWIP_DIR}/port/enetif.h"
+"${LWIP_CONTRIB_DIR}/apps/ping/ping.c"
+)
+
+target_include_directories(${MCUX_SDK_PROJECT_NAME} PRIVATE
+    ${ProjDirPath}/..
+    ${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/
+    ${LWIP_INCLUDE_DIRS}
+)
+
+set(CMAKE_MODULE_PATH
+    ${ProjDirPath}/../../../../../../core/
+    ${ProjDirPath}/../../../../../../core/drivers/enet/
+    ${ProjDirPath}/../../../../../../core/components/phy/device/phyar8031/
+    ${ProjDirPath}/../../../../../../core/components/phy/
+    ${ProjDirPath}/../../../../../../core/components/phy/mdio/enet/
+)
+
+#Include Entry cmake component
+include(all_devices)
+
+# include modules
+include(driver_mdio-enet)
+include(driver_phy-device-ar8031)
+include(utility_debug_console_lite)
+include(utility_assert_lite)
+include(driver_clock)
+include(driver_enet)
+include(driver_common)
+include(driver_rdc)
+include(device_CMSIS)
+include(component_iuart_adapter)
+include(component_lists)
+include(driver_iuart)
+include(device_startup)
+include(driver_igpio)
+include(driver_mdio-common)
+include(CMSIS_Include_core_cm)
+include(driver_phy-common)
+include(utilities_misc_utilities)
+include(device_system)
+include(driver_gpt)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--start-group)
+
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE m)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE c)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE gcc)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE nosys)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE lwipcore)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--end-group)
+
+ADD_CUSTOM_COMMAND(TARGET ${MCUX_SDK_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY}
+-Obinary ${EXECUTABLE_OUTPUT_PATH}/${MCUX_SDK_PROJECT_NAME} ${EXECUTABLE_OUTPUT_PATH}/lwip_ping_bm.bin)
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
new file mode 100644
index 000000000..dbd6a7631
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
@@ -0,0 +1,226 @@
+/*
+** ###################################################################
+**     Processors:          MIMX8MM6CVTKZ
+**                          MIMX8MM6DVTLZ
+**
+**     Compiler:            GNU C Compiler
+**     Reference manual:    MX8MMRM, Rev. 0, 02/2019
+**     Version:             rev. 4.0, 2019-02-18
+**     Build:               b200330
+**
+**     Abstract:
+**         Linker file for the GNU C Compiler
+**
+**     Copyright 2016 Freescale Semiconductor, Inc.
+**     Copyright 2016-2020 NXP
+**     All rights reserved.
+**
+**     SPDX-License-Identifier: BSD-3-Clause
+**
+**     http:                 www.nxp.com
+**     mail:                 support@nxp.com
+**
+** ###################################################################
+*/
+
+/* Entry Point */
+ENTRY(Reset_Handler)
+
+HEAP_SIZE  = DEFINED(__heap_size__)  ? __heap_size__  : 0x0400;
+STACK_SIZE = DEFINED(__stack_size__) ? __stack_size__ : 0x0400;
+
+/* Specify the memory areas */
+MEMORY
+{
+  m_interrupts          (RX)  : ORIGIN = 0x1FFE0000, LENGTH = 0x00000240
+  m_text                (RX)  : ORIGIN = 0x1FFE0240, LENGTH = 0x0001FDC0
+  m_data                (RW)  : ORIGIN = 0x20000000, LENGTH = 0x00020000
+  m_data2               (RW)  : ORIGIN = 0x80000000, LENGTH = 0x01000000
+}
+
+/* Define output sections */
+SECTIONS
+{
+/* The startup code goes first into internal RAM */
+  .interrupts :
+  {
+    __VECTOR_TABLE = .;
+    __Vectors = .;
+    . = ALIGN(4);
+    KEEP(*(.isr_vector))     /* Startup code */
+    . = ALIGN(4);
+  } > m_interrupts
+
+  .resource_table :
+  {
+    . = ALIGN(8);
+    KEEP(*(.resource_table)) /* Resource table */
+    . = ALIGN(8);
+  } > m_text
+
+  /* The program code and other data goes into internal RAM */
+  .text :
+  {
+    . = ALIGN(4);
+    *(.text)                 /* .text sections (code) */
+    *(.text*)                /* .text* sections (code) */
+    *(.rodata)               /* .rodata sections (constants, strings, etc.) */
+    *(.rodata*)              /* .rodata* sections (constants, strings, etc.) */
+    *(.glue_7)               /* glue arm to thumb code */
+    *(.glue_7t)              /* glue thumb to arm code */
+    *(.eh_frame)
+    KEEP (*(.init))
+    KEEP (*(.fini))
+    . = ALIGN(4);
+  } > m_text
+
+  .ARM.extab :
+  {
+    *(.ARM.extab* .gnu.linkonce.armextab.*)
+  } > m_text
+
+  .ARM :
+  {
+    __exidx_start = .;
+    *(.ARM.exidx*)
+    __exidx_end = .;
+  } > m_text
+
+ .ctors :
+  {
+    __CTOR_LIST__ = .;
+    /* gcc uses crtbegin.o to find the start of
+       the constructors, so we make sure it is
+       first.  Because this is a wildcard, it
+       doesn't matter if the user does not
+       actually link against crtbegin.o; the
+       linker won't look for a file to match a
+       wildcard.  The wildcard also means that it
+       doesn't matter which directory crtbegin.o
+       is in.  */
+    KEEP (*crtbegin.o(.ctors))
+    KEEP (*crtbegin?.o(.ctors))
+    /* We don't want to include the .ctor section from
+       from the crtend.o file until after the sorted ctors.
+       The .ctor section from the crtend file contains the
+       end of ctors marker and it must be last */
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors))
+    KEEP (*(SORT(.ctors.*)))
+    KEEP (*(.ctors))
+    __CTOR_END__ = .;
+  } > m_text
+
+  .dtors :
+  {
+    __DTOR_LIST__ = .;
+    KEEP (*crtbegin.o(.dtors))
+    KEEP (*crtbegin?.o(.dtors))
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors))
+    KEEP (*(SORT(.dtors.*)))
+    KEEP (*(.dtors))
+    __DTOR_END__ = .;
+  } > m_text
+
+  .preinit_array :
+  {
+    PROVIDE_HIDDEN (__preinit_array_start = .);
+    KEEP (*(.preinit_array*))
+    PROVIDE_HIDDEN (__preinit_array_end = .);
+  } > m_text
+
+  .init_array :
+  {
+    PROVIDE_HIDDEN (__init_array_start = .);
+    KEEP (*(SORT(.init_array.*)))
+    KEEP (*(.init_array*))
+    PROVIDE_HIDDEN (__init_array_end = .);
+  } > m_text
+
+  .fini_array :
+  {
+    PROVIDE_HIDDEN (__fini_array_start = .);
+    KEEP (*(SORT(.fini_array.*)))
+    KEEP (*(.fini_array*))
+    PROVIDE_HIDDEN (__fini_array_end = .);
+  } > m_text
+
+  __etext = .;    /* define a global symbol at end of code */
+  __DATA_ROM = .; /* Symbol is used by startup for data initialization */
+
+  .data : AT(__DATA_ROM)
+  {
+    . = ALIGN(4);
+    __DATA_RAM = .;
+    __data_start__ = .;      /* create a global symbol at data start */
+    *(.data)                 /* .data sections */
+    *(.data*)                /* .data* sections */
+    KEEP(*(.jcr*))
+    . = ALIGN(4);
+    __data_end__ = .;        /* define a global symbol at data end */
+  } > m_data
+
+  __CACHE_REGION_START = ORIGIN(m_interrupts);
+  __CACHE_REGION_SIZE  = 0;
+  __NDATA_ROM = __DATA_ROM + SIZEOF(.data); /* Symbol is used by startup for ncache data initialization */
+
+  .ncache.init : AT(__NDATA_ROM)
+  {
+    __noncachedata_start__ = .;   /* create a global symbol at ncache data start */
+    *(NonCacheable.init)
+    . = ALIGN(4);
+    __noncachedata_init_end__ = .;   /* create a global symbol at initialized ncache data end */
+  } > m_data2
+
+  . = __noncachedata_init_end__;
+  .ncache :
+  {
+    *(NonCacheable)
+    . = ALIGN(4);
+    __noncachedata_end__ = .;     /* define a global symbol at ncache data end */
+  } > m_data2
+
+  __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);
+  text_end = ORIGIN(m_text) + LENGTH(m_text);
+  ASSERT(__DATA_END <= text_end, "region m_text overflowed with text and data")
+
+  /* Uninitialized data section */
+  .bss :
+  {
+    /* This is used by the startup in order to initialize the .bss section */
+    . = ALIGN(4);
+    __START_BSS = .;
+    __bss_start__ = .;
+    *(.bss)
+    *(.bss*)
+    *(COMMON)
+    . = ALIGN(4);
+    __bss_end__ = .;
+    __END_BSS = .;
+  } > m_data
+
+  .heap :
+  {
+    . = ALIGN(8);
+    __end__ = .;
+    PROVIDE(end = .);
+    __HeapBase = .;
+    . += HEAP_SIZE;
+    __HeapLimit = .;
+    __heap_limit = .; /* Add for _sbrk */
+  } > m_data
+
+  .stack :
+  {
+    . = ALIGN(8);
+    . += STACK_SIZE;
+  } > m_data
+
+  /* Initializes stack on the end of block */
+  __StackTop   = ORIGIN(m_data) + LENGTH(m_data);
+  __StackLimit = __StackTop - STACK_SIZE;
+  PROVIDE(__stack = __StackTop);
+
+  .ARM.attributes 0 : { *(.ARM.attributes) }
+
+  ASSERT(__StackLimit >= __HeapLimit, "region m_data overflowed with stack and heap")
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_debug.sh b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_debug.sh
new file mode 100755
index 000000000..6db0796c3
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_debug.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=debug  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_release.sh b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_release.sh
new file mode 100755
index 000000000..0aa00d162
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/build_release.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=release  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/clean.sh b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/clean.sh
new file mode 100755
index 000000000..795ad8716
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/clean.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+rm -rf debug release CMakeFiles
+rm -rf Makefile cmake_install.cmake CMakeCache.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/config.cmake b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/config.cmake
new file mode 100644
index 000000000..37925c858
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/config.cmake
@@ -0,0 +1,5 @@
+# config to select component, the format is CONFIG_USE_${component}
+set(CONFIG_USE_driver_iuart true)
+set(CONFIG_USE_middleware_baremetal true)
+set(CONFIG_USE_soem_ifport_enet true)
+set(MCUX_DEVICE "MIMX8MM6")
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/flags.cmake b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/flags.cmake
new file mode 100644
index 000000000..8732cbdfa
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/armgcc/flags.cmake
@@ -0,0 +1,181 @@
+SET(CMAKE_ASM_FLAGS_DEBUG " \
+    ${CMAKE_ASM_FLAGS_DEBUG} \
+    -DDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_ASM_FLAGS_RELEASE " \
+    ${CMAKE_ASM_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_C_FLAGS_DEBUG " \
+    ${CMAKE_C_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_C_FLAGS_RELEASE " \
+    ${CMAKE_C_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_CXX_FLAGS_DEBUG " \
+    ${CMAKE_CXX_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_CXX_FLAGS_RELEASE " \
+    ${CMAKE_CXX_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_DEBUG " \
+    ${CMAKE_EXE_LINKER_FLAGS_DEBUG} \
+    -g \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_RELEASE " \
+    ${CMAKE_EXE_LINKER_FLAGS_RELEASE} \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/include/lwipopts.h b/evkmimx8mm/lwip_examples/lwip_ping/bm/include/lwipopts.h
new file mode 100644
index 000000000..8d31af1ef
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/include/lwipopts.h
@@ -0,0 +1,98 @@
+/**
+ ******************************************************************************
+ * @file    lwipopts.h
+ * This file is based on /src/include/lwip/opt.h
+ ******************************************************************************
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef LWIP_LWIPOPTS_H
+#define LWIP_LWIPOPTS_H
+
+/**
+ * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
+ * critical regions during buffer allocation, deallocation and memory
+ * allocation and deallocation.
+ */
+#define SYS_LIGHTWEIGHT_PROT            0
+/**
+ * NO_SYS==1: Bare metal lwIP
+ */
+#define NO_SYS                          1
+
+#define LWIP_TIMERS                     1
+
+extern struct netif netif_mini;
+#define LWIP_HOOK_IP4_ROUTE_SRC(src, dest) &netif_mini
+/**
+ * LWIP_NETCONN==0: Disable Netconn API (require to use api_lib.c)
+ */
+#define LWIP_NETCONN                    0
+/**
+ * LWIP_SOCKET==0: Disable Socket API (require to use sockets.c)
+ */
+#define LWIP_SOCKET                     0
+
+/* ---------- Memory options ---------- */
+/**
+ * MEM_ALIGNMENT: should be set to the alignment of the CPU
+ *    4 byte alignment -> #define MEM_ALIGNMENT 4
+ *    2 byte alignment -> #define MEM_ALIGNMENT 2
+ */
+#define MEM_ALIGNMENT                   4
+
+/* ---------- Pbuf options ------------ */
+/* PBUF_POOL_SIZE: the number of buffers in the pbuf pool. */
+#ifndef PBUF_POOL_SIZE
+#define PBUF_POOL_SIZE 5
+#endif
+
+/* ---------- TCP options ------------- */
+#ifndef LWIP_TCP
+#define LWIP_TCP 1
+#endif
+
+#ifndef TCP_TTL
+#define TCP_TTL 255
+#endif
+
+/* Controls if TCP should queue segments that arrive out of
+   order. Define to 0 if your device is low on memory. */
+#ifndef TCP_QUEUE_OOSEQ
+#define TCP_QUEUE_OOSEQ 0
+#endif
+
+/* IP options */
+#define IP_REASS_MAXAGE                 5
+#define IP_REASS_MAX_PBUFS              5
+
+/* ---------- ICMP options --------- */
+#ifndef LWIP_ICMP
+#define LWIP_ICMP 1
+#endif
+
+/* ---------- RAW options ---------- */
+#if !defined LWIP_RAW
+#define LWIP_RAW                        1
+#endif
+
+/* ---------- UDP options ---------- */
+#ifndef LWIP_UDP
+#define LWIP_UDP 1
+#endif
+#ifndef UDP_TTL
+#define UDP_TTL 255
+#endif
+
+/* -------- Statistics options ------ */
+#ifndef LWIP_STATS
+#define LWIP_STATS 0
+#endif
+#ifndef LWIP_PROVIDE_ERRNO
+#define LWIP_PROVIDE_ERRNO 1
+#endif
+
+#endif /* LWIP_LWIPOPTS_H */
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/lwip_ping_bm.c b/evkmimx8mm/lwip_examples/lwip_ping/bm/lwip_ping_bm.c
new file mode 100644
index 000000000..8669c92e5
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/lwip_ping_bm.c
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*******************************************************************************
+ * Includes
+ ******************************************************************************/
+
+#include "pin_mux.h"
+#include "fsl_gpio.h"
+#include "board.h"
+
+#include "fsl_phyar8031.h"
+#include <lwipopts.h>
+#include <lwip/timeouts.h>
+#include "enetif.h"
+#include "ping.h"
+
+/*******************************************************************************
+ * Definitions
+ ******************************************************************************/
+
+/* @TEST_ANCHOR */
+
+/* IP address configuration. */
+#ifndef configIP_ADDR0
+#define configIP_ADDR0      192
+#endif
+#ifndef configIP_ADDR1
+#define configIP_ADDR1      168
+#endif
+#ifndef configIP_ADDR2
+#define configIP_ADDR2      11
+#endif
+#ifndef configIP_ADDR3
+#define configIP_ADDR3      3
+#endif
+
+/* Netmask configuration. */
+#ifndef configNET_MASK0
+#define configNET_MASK0     255
+#endif
+#ifndef configNET_MASK1
+#define configNET_MASK1     255
+#endif
+#ifndef configNET_MASK2
+#define configNET_MASK2     255
+#endif
+#ifndef configNET_MASK3
+#define configNET_MASK3     0
+#endif
+
+/* Gateway address configuration. */
+#ifndef configGW_ADDR0
+#define configGW_ADDR0      192
+#endif
+#ifndef configGW_ADDR1
+#define configGW_ADDR1      168
+#endif
+#ifndef configGW_ADDR2
+#define configGW_ADDR2      11
+#endif
+#ifndef configGW_ADDR3
+#define configGW_ADDR3      1
+#endif
+
+/* MAC address configuration. */
+#ifndef configMAC_ADDR0
+#define configMAC_ADDR0     0x00
+#endif
+#ifndef configMAC_ADDR1
+#define configMAC_ADDR1     0x04
+#endif
+#ifndef configMAC_ADDR2
+#define configMAC_ADDR2     0x9F
+#endif
+#ifndef configMAC_ADDR3
+#define configMAC_ADDR3     0x05
+#endif
+#ifndef configMAC_ADDR4
+#define configMAC_ADDR4     0xCF
+#endif
+#ifndef configMAC_ADDR5
+#define configMAC_ADDR5     0xFC
+#endif
+
+#define OSEM_PORT_NAME          "enet"
+#define OSEM_PORT               ENET
+#define PHY_ADDRESS             0x00u
+#define ENET_CLOCK_FREQ         250000000
+
+#define EXAMPLE_PHY_INTERFACE_RGMII
+#ifndef PHY_AUTONEGO_TIMEOUT_COUNT
+#define PHY_AUTONEGO_TIMEOUT_COUNT (100000)
+#endif
+#ifndef PHY_STABILITY_DELAY_US
+#define PHY_STABILITY_DELAY_US (0U)
+#endif
+
+/* please change this according to your MAC */
+uint8_t myMAC[6] = { configMAC_ADDR0, configMAC_ADDR1, configMAC_ADDR2, configMAC_ADDR3, configMAC_ADDR4, configMAC_ADDR5 };
+
+void ethernetif_config()
+{
+    memset(&if_port, 0, sizeof(if_port));
+    if_port.mdioHandle.ops = &enet_ops;
+    if_port.phyHandle.ops = &phyar8031_ops;
+    if_port.bufferConfig = buffConfig;
+    if_port.base = OSEM_PORT;
+/* The miiMode should be set according to the different PHY interfaces. */
+#ifdef EXAMPLE_PHY_INTERFACE_RGMII
+    if_port.mii_mode = kENET_RgmiiMode;
+#else
+    if_port.mii_mode = kENET_RmiiMode;
+#endif
+    if_port.phy_config.autoNeg = true;
+    if_port.phy_config.phyAddr = PHY_ADDRESS;
+    if_port.srcClock_Hz = ENET_CLOCK_FREQ;
+    if_port.phy_autonego_timeout_count = PHY_AUTONEGO_TIMEOUT_COUNT;
+    if_port.phy_stability_delay_us = PHY_STABILITY_DELAY_US;
+}
+
+struct netif netif_mini;
+
+static err_t netif_set_opts(struct netif *netif) {
+  netif->linkoutput = netif_output;
+  netif->output     = etharp_output;
+  netif->mtu        = 1500;
+  netif->flags      = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET;
+  netif->hwaddr_len = 6;
+  netif->hwaddr[0] = configMAC_ADDR0;
+  netif->hwaddr[1] = configMAC_ADDR1;
+  netif->hwaddr[2] = configMAC_ADDR2;
+  netif->hwaddr[3] = configMAC_ADDR3;
+  netif->hwaddr[4] = configMAC_ADDR4;
+  netif->hwaddr[5] = configMAC_ADDR5;
+
+  return ERR_OK;
+}
+
+/*!
+ * @brief Main function.
+ */
+int main(void)
+{
+    ip4_addr_t netif_ipaddr;
+    ip4_addr_t netif_netmask;
+    ip4_addr_t netif_gw;
+    ip4_addr_t netif_pingaddr;
+
+    /* Hardware Initialization. */
+    BOARD_InitMemory();
+    BOARD_RdcInit();
+    BOARD_InitPins();
+    BOARD_BootClockRUN();
+    BOARD_InitDebugConsole();
+
+    CLOCK_SetRootDivider(kCLOCK_RootEnetAxi, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetAxi, kCLOCK_EnetAxiRootmuxSysPll2Div4); /* SYSTEM PLL2 divided by 4: 250Mhz */
+
+    /* Time stamp clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetTimer, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetTimer, kCLOCK_EnetTimerRootmuxSysPll2Div10); /* SYSTEM PLL2 divided by 10: 100Mhz */
+
+    /* mii/rgmii interface clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetRef, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetRef, kCLOCK_EnetRefRootmuxSysPll2Div8); /* SYSTEM PLL2 divided by 8: 125MHz */
+
+    gpio_pin_config_t gpio_config = {kGPIO_DigitalOutput, 0, kGPIO_NoIntmode};
+
+    /* PHY reset pin */
+    GPIO_PinInit(GPIO4, 22, &gpio_config);
+
+    /* PHY reset */
+    GPIO_WritePinOutput(GPIO4, 22, 0);
+    SDK_DelayAtLeastUs(10000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+    GPIO_WritePinOutput(GPIO4, 22, 1);
+    SDK_DelayAtLeastUs(30000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+
+    /* used by TCP */
+    osal_timer_init();
+
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done1_IRQn);
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done2_IRQn);
+
+    IP4_ADDR(&netif_ipaddr, configIP_ADDR0, configIP_ADDR1, configIP_ADDR2, configIP_ADDR3);
+    IP4_ADDR(&netif_netmask, configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3);
+    IP4_ADDR(&netif_gw, configGW_ADDR0, configGW_ADDR1, configGW_ADDR2, configGW_ADDR3);
+    IP4_ADDR(&netif_pingaddr, 192,168,11,2);
+
+    ethernetif_config();
+    ethernetif_init(myMAC);
+
+    printf("Ethernet initialization done!\n");
+
+    lwip_init();
+
+    netif_add(&netif_mini, &netif_ipaddr, &netif_netmask, &netif_gw, NULL, netif_set_opts, netif_input);
+
+    netif_set_default(&netif_mini);
+    netif_set_up(&netif_mini);
+
+    ping_init(&netif_pingaddr);
+
+    printf("Ping sender starts!\n");
+
+    /* must be called repeatedly in bare-metal implementations */
+    while(1) {
+        ethernetif_receive(&netif_mini);
+        sys_check_timeouts();
+    }
+
+    return 0;
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.c b/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.c
new file mode 100644
index 000000000..e2aab85c5
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.c
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include "fsl_common.h"
+#include "fsl_iomuxc.h"
+#include "pin_mux.h"
+
+void BOARD_InitBootPins(void)
+{
+    BOARD_InitPins();
+}
+
+void BOARD_InitPins(void) {
+    IOMUXC_SetPinMux(IOMUXC_UART4_RXD_UART4_RX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_RXD_UART4_RX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+    IOMUXC_SetPinMux(IOMUXC_UART4_TXD_UART4_TX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_TXD_UART4_TX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDIO_ENET1_MDIO, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDIO_ENET1_MDIO,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDC_ENET1_MDC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDC_ENET1_MDC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD3_ENET1_RGMII_TD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD3_ENET1_RGMII_TD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD2_ENET1_RGMII_TD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD2_ENET1_RGMII_TD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD1_ENET1_RGMII_TD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD1_ENET1_RGMII_TD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD0_ENET1_RGMII_TD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD0_ENET1_RGMII_TD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD3_ENET1_RGMII_RD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD3_ENET1_RGMII_RD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD2_ENET1_RGMII_RD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD2_ENET1_RGMII_RD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD1_ENET1_RGMII_RD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD1_ENET1_RGMII_RD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD0_ENET1_RGMII_RD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD0_ENET1_RGMII_RD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TXC_ENET1_RGMII_TXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TXC_ENET1_RGMII_TXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RXC_ENET1_RGMII_RXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RXC_ENET1_RGMII_RXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_SAI2_RXC_GPIO4_IO22, 5U);
+    IOMUXC_SetPinConfig(IOMUXC_SAI2_RXC_GPIO4_IO22,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.h b/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.h
new file mode 100644
index 000000000..68b6a81b4
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_ping/bm/pin_mux.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef _PIN_MUX_H_
+#define _PIN_MUX_H_
+
+#include "board.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+void BOARD_InitBootPins(void);
+
+void BOARD_InitPins(void);
+
+#if defined(__cplusplus)
+}
+#endif
+
+#endif /* _PIN_MUX_H_ */
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/CMakeLists.txt b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/CMakeLists.txt
new file mode 100644
index 000000000..0e6eea12c
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/CMakeLists.txt
@@ -0,0 +1,110 @@
+# CROSS COMPILER SETTING
+SET(CMAKE_SYSTEM_NAME Generic)
+CMAKE_MINIMUM_REQUIRED (VERSION 3.1.1)
+
+# THE VERSION NUMBER
+SET (Tutorial_VERSION_MAJOR 1)
+SET (Tutorial_VERSION_MINOR 0)
+
+# ENABLE ASM
+ENABLE_LANGUAGE(ASM)
+
+SET(CMAKE_STATIC_LIBRARY_PREFIX)
+SET(CMAKE_STATIC_LIBRARY_SUFFIX)
+
+SET(CMAKE_EXECUTABLE_LIBRARY_PREFIX)
+SET(CMAKE_EXECUTABLE_LIBRARY_SUFFIX)
+
+# CURRENT DIRECTORY
+SET(ProjDirPath ${CMAKE_CURRENT_SOURCE_DIR})
+
+SET(EXECUTABLE_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LIBRARY_OUTPUT_PATH ${ProjDirPath}/${CMAKE_BUILD_TYPE})
+SET(LWIP_DIR ${ProjDirPath}/../../../../../../middleware/lwip)
+SET(LWIP_CONTRIB_DIR ${LWIP_DIR}/contrib)
+SET(LWIP_INCLUDE_DIRS
+    "${LWIP_DIR}/src/include"
+    "${LWIP_DIR}/port"
+    "${LWIP_DIR}/port/arch"
+    "${LWIP_CONTRIB_DIR}/apps/udpecho_raw"
+    "${LWIP_CONTRIB_DIR}/apps/tcpecho_raw"
+    "${ProjDirPath}/../include"
+    )
+
+include(${LWIP_DIR}/src/Filelists.cmake)
+
+project(lwip_tcp_udp_responder_bm)
+
+set(MCUX_SDK_PROJECT_NAME lwip_tcp_udp_responder_bm.elf)
+
+include(${ProjDirPath}/flags.cmake)
+
+include(${ProjDirPath}/config.cmake)
+
+add_executable(${MCUX_SDK_PROJECT_NAME}
+"${ProjDirPath}/../lwip_tcp_udp_responder_bm.c"
+"${ProjDirPath}/../pin_mux.c"
+"${ProjDirPath}/../pin_mux.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/board.h"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.c"
+"${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/clock_config.h"
+${lwipcore_SRCS}
+${lwipcore4_SRCS}
+"${LWIP_DIR}/port/enetif.c"
+"${LWIP_DIR}/port/enetif.h"
+"${LWIP_CONTRIB_DIR}/apps/udpecho_raw/udpecho_raw.c"
+"${LWIP_CONTRIB_DIR}/apps/tcpecho_raw/tcpecho_raw.c"
+)
+
+target_include_directories(${MCUX_SDK_PROJECT_NAME} PRIVATE
+    ${ProjDirPath}/..
+    ${ProjDirPath}/../../../../../../core/boards/evkmimx8mm/
+    ${LWIP_INCLUDE_DIRS}
+)
+
+set(CMAKE_MODULE_PATH
+    ${ProjDirPath}/../../../../../../core/
+    ${ProjDirPath}/../../../../../../core/drivers/enet/
+    ${ProjDirPath}/../../../../../../core/components/phy/device/phyar8031/
+    ${ProjDirPath}/../../../../../../core/components/phy/
+    ${ProjDirPath}/../../../../../../core/components/phy/mdio/enet/
+)
+
+#Include Entry cmake component
+include(all_devices)
+
+# include modules
+include(driver_mdio-enet)
+include(driver_phy-device-ar8031)
+include(utility_debug_console_lite)
+include(utility_assert_lite)
+include(driver_clock)
+include(driver_enet)
+include(driver_common)
+include(driver_rdc)
+include(device_CMSIS)
+include(component_iuart_adapter)
+include(component_lists)
+include(driver_iuart)
+include(device_startup)
+include(driver_igpio)
+include(driver_mdio-common)
+include(CMSIS_Include_core_cm)
+include(driver_phy-common)
+include(utilities_misc_utilities)
+include(device_system)
+include(driver_gpt)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--start-group)
+
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE m)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE c)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE gcc)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE nosys)
+target_link_libraries(${MCUX_SDK_PROJECT_NAME} PRIVATE lwipcore)
+
+TARGET_LINK_LIBRARIES(${MCUX_SDK_PROJECT_NAME} PRIVATE -Wl,--end-group)
+
+ADD_CUSTOM_COMMAND(TARGET ${MCUX_SDK_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY}
+-Obinary ${EXECUTABLE_OUTPUT_PATH}/${MCUX_SDK_PROJECT_NAME} ${EXECUTABLE_OUTPUT_PATH}/lwip_tcp_udp_responder_bm.bin)
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
new file mode 100644
index 000000000..dbd6a7631
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/MIMX8MM6xxxxx_cm4_ram.ld
@@ -0,0 +1,226 @@
+/*
+** ###################################################################
+**     Processors:          MIMX8MM6CVTKZ
+**                          MIMX8MM6DVTLZ
+**
+**     Compiler:            GNU C Compiler
+**     Reference manual:    MX8MMRM, Rev. 0, 02/2019
+**     Version:             rev. 4.0, 2019-02-18
+**     Build:               b200330
+**
+**     Abstract:
+**         Linker file for the GNU C Compiler
+**
+**     Copyright 2016 Freescale Semiconductor, Inc.
+**     Copyright 2016-2020 NXP
+**     All rights reserved.
+**
+**     SPDX-License-Identifier: BSD-3-Clause
+**
+**     http:                 www.nxp.com
+**     mail:                 support@nxp.com
+**
+** ###################################################################
+*/
+
+/* Entry Point */
+ENTRY(Reset_Handler)
+
+HEAP_SIZE  = DEFINED(__heap_size__)  ? __heap_size__  : 0x0400;
+STACK_SIZE = DEFINED(__stack_size__) ? __stack_size__ : 0x0400;
+
+/* Specify the memory areas */
+MEMORY
+{
+  m_interrupts          (RX)  : ORIGIN = 0x1FFE0000, LENGTH = 0x00000240
+  m_text                (RX)  : ORIGIN = 0x1FFE0240, LENGTH = 0x0001FDC0
+  m_data                (RW)  : ORIGIN = 0x20000000, LENGTH = 0x00020000
+  m_data2               (RW)  : ORIGIN = 0x80000000, LENGTH = 0x01000000
+}
+
+/* Define output sections */
+SECTIONS
+{
+/* The startup code goes first into internal RAM */
+  .interrupts :
+  {
+    __VECTOR_TABLE = .;
+    __Vectors = .;
+    . = ALIGN(4);
+    KEEP(*(.isr_vector))     /* Startup code */
+    . = ALIGN(4);
+  } > m_interrupts
+
+  .resource_table :
+  {
+    . = ALIGN(8);
+    KEEP(*(.resource_table)) /* Resource table */
+    . = ALIGN(8);
+  } > m_text
+
+  /* The program code and other data goes into internal RAM */
+  .text :
+  {
+    . = ALIGN(4);
+    *(.text)                 /* .text sections (code) */
+    *(.text*)                /* .text* sections (code) */
+    *(.rodata)               /* .rodata sections (constants, strings, etc.) */
+    *(.rodata*)              /* .rodata* sections (constants, strings, etc.) */
+    *(.glue_7)               /* glue arm to thumb code */
+    *(.glue_7t)              /* glue thumb to arm code */
+    *(.eh_frame)
+    KEEP (*(.init))
+    KEEP (*(.fini))
+    . = ALIGN(4);
+  } > m_text
+
+  .ARM.extab :
+  {
+    *(.ARM.extab* .gnu.linkonce.armextab.*)
+  } > m_text
+
+  .ARM :
+  {
+    __exidx_start = .;
+    *(.ARM.exidx*)
+    __exidx_end = .;
+  } > m_text
+
+ .ctors :
+  {
+    __CTOR_LIST__ = .;
+    /* gcc uses crtbegin.o to find the start of
+       the constructors, so we make sure it is
+       first.  Because this is a wildcard, it
+       doesn't matter if the user does not
+       actually link against crtbegin.o; the
+       linker won't look for a file to match a
+       wildcard.  The wildcard also means that it
+       doesn't matter which directory crtbegin.o
+       is in.  */
+    KEEP (*crtbegin.o(.ctors))
+    KEEP (*crtbegin?.o(.ctors))
+    /* We don't want to include the .ctor section from
+       from the crtend.o file until after the sorted ctors.
+       The .ctor section from the crtend file contains the
+       end of ctors marker and it must be last */
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors))
+    KEEP (*(SORT(.ctors.*)))
+    KEEP (*(.ctors))
+    __CTOR_END__ = .;
+  } > m_text
+
+  .dtors :
+  {
+    __DTOR_LIST__ = .;
+    KEEP (*crtbegin.o(.dtors))
+    KEEP (*crtbegin?.o(.dtors))
+    KEEP (*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors))
+    KEEP (*(SORT(.dtors.*)))
+    KEEP (*(.dtors))
+    __DTOR_END__ = .;
+  } > m_text
+
+  .preinit_array :
+  {
+    PROVIDE_HIDDEN (__preinit_array_start = .);
+    KEEP (*(.preinit_array*))
+    PROVIDE_HIDDEN (__preinit_array_end = .);
+  } > m_text
+
+  .init_array :
+  {
+    PROVIDE_HIDDEN (__init_array_start = .);
+    KEEP (*(SORT(.init_array.*)))
+    KEEP (*(.init_array*))
+    PROVIDE_HIDDEN (__init_array_end = .);
+  } > m_text
+
+  .fini_array :
+  {
+    PROVIDE_HIDDEN (__fini_array_start = .);
+    KEEP (*(SORT(.fini_array.*)))
+    KEEP (*(.fini_array*))
+    PROVIDE_HIDDEN (__fini_array_end = .);
+  } > m_text
+
+  __etext = .;    /* define a global symbol at end of code */
+  __DATA_ROM = .; /* Symbol is used by startup for data initialization */
+
+  .data : AT(__DATA_ROM)
+  {
+    . = ALIGN(4);
+    __DATA_RAM = .;
+    __data_start__ = .;      /* create a global symbol at data start */
+    *(.data)                 /* .data sections */
+    *(.data*)                /* .data* sections */
+    KEEP(*(.jcr*))
+    . = ALIGN(4);
+    __data_end__ = .;        /* define a global symbol at data end */
+  } > m_data
+
+  __CACHE_REGION_START = ORIGIN(m_interrupts);
+  __CACHE_REGION_SIZE  = 0;
+  __NDATA_ROM = __DATA_ROM + SIZEOF(.data); /* Symbol is used by startup for ncache data initialization */
+
+  .ncache.init : AT(__NDATA_ROM)
+  {
+    __noncachedata_start__ = .;   /* create a global symbol at ncache data start */
+    *(NonCacheable.init)
+    . = ALIGN(4);
+    __noncachedata_init_end__ = .;   /* create a global symbol at initialized ncache data end */
+  } > m_data2
+
+  . = __noncachedata_init_end__;
+  .ncache :
+  {
+    *(NonCacheable)
+    . = ALIGN(4);
+    __noncachedata_end__ = .;     /* define a global symbol at ncache data end */
+  } > m_data2
+
+  __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);
+  text_end = ORIGIN(m_text) + LENGTH(m_text);
+  ASSERT(__DATA_END <= text_end, "region m_text overflowed with text and data")
+
+  /* Uninitialized data section */
+  .bss :
+  {
+    /* This is used by the startup in order to initialize the .bss section */
+    . = ALIGN(4);
+    __START_BSS = .;
+    __bss_start__ = .;
+    *(.bss)
+    *(.bss*)
+    *(COMMON)
+    . = ALIGN(4);
+    __bss_end__ = .;
+    __END_BSS = .;
+  } > m_data
+
+  .heap :
+  {
+    . = ALIGN(8);
+    __end__ = .;
+    PROVIDE(end = .);
+    __HeapBase = .;
+    . += HEAP_SIZE;
+    __HeapLimit = .;
+    __heap_limit = .; /* Add for _sbrk */
+  } > m_data
+
+  .stack :
+  {
+    . = ALIGN(8);
+    . += STACK_SIZE;
+  } > m_data
+
+  /* Initializes stack on the end of block */
+  __StackTop   = ORIGIN(m_data) + LENGTH(m_data);
+  __StackLimit = __StackTop - STACK_SIZE;
+  PROVIDE(__stack = __StackTop);
+
+  .ARM.attributes 0 : { *(.ARM.attributes) }
+
+  ASSERT(__StackLimit >= __HeapLimit, "region m_data overflowed with stack and heap")
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_debug.sh b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_debug.sh
new file mode 100755
index 000000000..6db0796c3
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_debug.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=debug  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_release.sh b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_release.sh
new file mode 100755
index 000000000..0aa00d162
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/build_release.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+if [ -d "CMakeFiles" ];then rm -rf CMakeFiles; fi
+if [ -f "Makefile" ];then rm -f Makefile; fi
+if [ -f "cmake_install.cmake" ];then rm -f cmake_install.cmake; fi
+if [ -f "CMakeCache.txt" ];then rm -f CMakeCache.txt; fi
+cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="/../../../../../../core/tools/cmake_toolchain_files/armgcc.cmake" -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=release  .
+make -j 2>&1 | tee build_log.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/clean.sh b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/clean.sh
new file mode 100755
index 000000000..795ad8716
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/clean.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+rm -rf debug release CMakeFiles
+rm -rf Makefile cmake_install.cmake CMakeCache.txt
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/config.cmake b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/config.cmake
new file mode 100644
index 000000000..37925c858
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/config.cmake
@@ -0,0 +1,5 @@
+# config to select component, the format is CONFIG_USE_${component}
+set(CONFIG_USE_driver_iuart true)
+set(CONFIG_USE_middleware_baremetal true)
+set(CONFIG_USE_soem_ifport_enet true)
+set(MCUX_DEVICE "MIMX8MM6")
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/flags.cmake b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/flags.cmake
new file mode 100644
index 000000000..8732cbdfa
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/armgcc/flags.cmake
@@ -0,0 +1,181 @@
+SET(CMAKE_ASM_FLAGS_DEBUG " \
+    ${CMAKE_ASM_FLAGS_DEBUG} \
+    -DDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_ASM_FLAGS_RELEASE " \
+    ${CMAKE_ASM_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -D__STARTUP_CLEAR_BSS \
+    -D__STARTUP_INITIALIZE_NONCACHEDATA \
+    -mcpu=cortex-m4 \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+")
+SET(CMAKE_C_FLAGS_DEBUG " \
+    ${CMAKE_C_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_C_FLAGS_RELEASE " \
+    ${CMAKE_C_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DPRINTF_FLOAT_ENABLE=0 \
+    -DSCANF_FLOAT_ENABLE=0 \
+    -DPRINTF_ADVANCED_ENABLE=0 \
+    -DSCANF_ADVANCED_ENABLE=0 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -std=gnu99 \
+")
+SET(CMAKE_CXX_FLAGS_DEBUG " \
+    ${CMAKE_CXX_FLAGS_DEBUG} \
+    -DDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -g \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_CXX_FLAGS_RELEASE " \
+    ${CMAKE_CXX_FLAGS_RELEASE} \
+    -DNDEBUG \
+    -DCPU_MIMX8MM6DVTLZ \
+    -DCPU_MIMX8MM6DVTLZ_cm4 \
+    -DMCUXPRESSO_SDK \
+    -O0 \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -Wno-address-of-packed-member \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -mthumb \
+    -MMD \
+    -MP \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mapcs \
+    -fno-rtti \
+    -fno-exceptions \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_DEBUG " \
+    ${CMAKE_EXE_LINKER_FLAGS_DEBUG} \
+    -g \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
+SET(CMAKE_EXE_LINKER_FLAGS_RELEASE " \
+    ${CMAKE_EXE_LINKER_FLAGS_RELEASE} \
+    -mcpu=cortex-m4 \
+    -Wall \
+    -mfloat-abi=hard \
+    -mfpu=fpv4-sp-d16 \
+    -Wl,--print-memory-usage \
+    --specs=nano.specs \
+    --specs=nosys.specs \
+    -fno-common \
+    -ffunction-sections \
+    -fdata-sections \
+    -ffreestanding \
+    -fno-builtin \
+    -mthumb \
+    -mapcs \
+    -Xlinker \
+    --gc-sections \
+    -Xlinker \
+    -static \
+    -Xlinker \
+    -z \
+    -Xlinker \
+    muldefs \
+    -Xlinker \
+    -Map=output.map \
+    -T${ProjDirPath}/MIMX8MM6xxxxx_cm4_ram.ld -static \
+")
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/include/lwipopts.h b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/include/lwipopts.h
new file mode 100644
index 000000000..8d31af1ef
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/include/lwipopts.h
@@ -0,0 +1,98 @@
+/**
+ ******************************************************************************
+ * @file    lwipopts.h
+ * This file is based on /src/include/lwip/opt.h
+ ******************************************************************************
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef LWIP_LWIPOPTS_H
+#define LWIP_LWIPOPTS_H
+
+/**
+ * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
+ * critical regions during buffer allocation, deallocation and memory
+ * allocation and deallocation.
+ */
+#define SYS_LIGHTWEIGHT_PROT            0
+/**
+ * NO_SYS==1: Bare metal lwIP
+ */
+#define NO_SYS                          1
+
+#define LWIP_TIMERS                     1
+
+extern struct netif netif_mini;
+#define LWIP_HOOK_IP4_ROUTE_SRC(src, dest) &netif_mini
+/**
+ * LWIP_NETCONN==0: Disable Netconn API (require to use api_lib.c)
+ */
+#define LWIP_NETCONN                    0
+/**
+ * LWIP_SOCKET==0: Disable Socket API (require to use sockets.c)
+ */
+#define LWIP_SOCKET                     0
+
+/* ---------- Memory options ---------- */
+/**
+ * MEM_ALIGNMENT: should be set to the alignment of the CPU
+ *    4 byte alignment -> #define MEM_ALIGNMENT 4
+ *    2 byte alignment -> #define MEM_ALIGNMENT 2
+ */
+#define MEM_ALIGNMENT                   4
+
+/* ---------- Pbuf options ------------ */
+/* PBUF_POOL_SIZE: the number of buffers in the pbuf pool. */
+#ifndef PBUF_POOL_SIZE
+#define PBUF_POOL_SIZE 5
+#endif
+
+/* ---------- TCP options ------------- */
+#ifndef LWIP_TCP
+#define LWIP_TCP 1
+#endif
+
+#ifndef TCP_TTL
+#define TCP_TTL 255
+#endif
+
+/* Controls if TCP should queue segments that arrive out of
+   order. Define to 0 if your device is low on memory. */
+#ifndef TCP_QUEUE_OOSEQ
+#define TCP_QUEUE_OOSEQ 0
+#endif
+
+/* IP options */
+#define IP_REASS_MAXAGE                 5
+#define IP_REASS_MAX_PBUFS              5
+
+/* ---------- ICMP options --------- */
+#ifndef LWIP_ICMP
+#define LWIP_ICMP 1
+#endif
+
+/* ---------- RAW options ---------- */
+#if !defined LWIP_RAW
+#define LWIP_RAW                        1
+#endif
+
+/* ---------- UDP options ---------- */
+#ifndef LWIP_UDP
+#define LWIP_UDP 1
+#endif
+#ifndef UDP_TTL
+#define UDP_TTL 255
+#endif
+
+/* -------- Statistics options ------ */
+#ifndef LWIP_STATS
+#define LWIP_STATS 0
+#endif
+#ifndef LWIP_PROVIDE_ERRNO
+#define LWIP_PROVIDE_ERRNO 1
+#endif
+
+#endif /* LWIP_LWIPOPTS_H */
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/lwip_tcp_udp_responder_bm.c b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/lwip_tcp_udp_responder_bm.c
new file mode 100644
index 000000000..075ee35b9
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/lwip_tcp_udp_responder_bm.c
@@ -0,0 +1,221 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/*******************************************************************************
+ * Includes
+ ******************************************************************************/
+
+#include "pin_mux.h"
+#include "fsl_gpio.h"
+#include "board.h"
+
+#include "fsl_phyar8031.h"
+#include "udpecho_raw.h"
+#include "tcpecho_raw.h"
+#include <lwipopts.h>
+#include <lwip/timeouts.h>
+#include "enetif.h"
+
+/*******************************************************************************
+ * Definitions
+ ******************************************************************************/
+
+/* @TEST_ANCHOR */
+
+/* IP address configuration. */
+#ifndef configIP_ADDR0
+#define configIP_ADDR0      192
+#endif
+#ifndef configIP_ADDR1
+#define configIP_ADDR1      168
+#endif
+#ifndef configIP_ADDR2
+#define configIP_ADDR2      11
+#endif
+#ifndef configIP_ADDR3
+#define configIP_ADDR3      3
+#endif
+
+/* Netmask configuration. */
+#ifndef configNET_MASK0
+#define configNET_MASK0     255
+#endif
+#ifndef configNET_MASK1
+#define configNET_MASK1     255
+#endif
+#ifndef configNET_MASK2
+#define configNET_MASK2     255
+#endif
+#ifndef configNET_MASK3
+#define configNET_MASK3     0
+#endif
+
+/* Gateway address configuration. */
+#ifndef configGW_ADDR0
+#define configGW_ADDR0      192
+#endif
+#ifndef configGW_ADDR1
+#define configGW_ADDR1      168
+#endif
+#ifndef configGW_ADDR2
+#define configGW_ADDR2      11
+#endif
+#ifndef configGW_ADDR3
+#define configGW_ADDR3      1
+#endif
+
+/* MAC address configuration. */
+#ifndef configMAC_ADDR0
+#define configMAC_ADDR0     0x00
+#endif
+#ifndef configMAC_ADDR1
+#define configMAC_ADDR1     0x04
+#endif
+#ifndef configMAC_ADDR2
+#define configMAC_ADDR2     0x9F
+#endif
+#ifndef configMAC_ADDR3
+#define configMAC_ADDR3     0x05
+#endif
+#ifndef configMAC_ADDR4
+#define configMAC_ADDR4     0xCF
+#endif
+#ifndef configMAC_ADDR5
+#define configMAC_ADDR5     0xFC
+#endif
+
+uint8_t myMAC[6] = { configMAC_ADDR0, configMAC_ADDR1, configMAC_ADDR2, configMAC_ADDR3, configMAC_ADDR4, configMAC_ADDR5 };
+
+#define OSEM_PORT_NAME          "enet"
+#define OSEM_PORT               ENET
+#define PHY_ADDRESS             0x00u
+#define ENET_CLOCK_FREQ         250000000
+
+#define EXAMPLE_PHY_INTERFACE_RGMII
+#ifndef PHY_AUTONEGO_TIMEOUT_COUNT
+#define PHY_AUTONEGO_TIMEOUT_COUNT (100000)
+#endif
+#ifndef PHY_STABILITY_DELAY_US
+#define PHY_STABILITY_DELAY_US (0U)
+#endif
+
+void ethernetif_config()
+{
+    memset(&if_port, 0, sizeof(if_port));
+    if_port.mdioHandle.ops = &enet_ops;
+    if_port.phyHandle.ops = &phyar8031_ops;
+    if_port.bufferConfig = buffConfig;
+    if_port.base = OSEM_PORT;
+/* The miiMode should be set according to the different PHY interfaces. */
+#ifdef EXAMPLE_PHY_INTERFACE_RGMII
+    if_port.mii_mode = kENET_RgmiiMode;
+#else
+    if_port.mii_mode = kENET_RmiiMode;
+#endif
+    if_port.phy_config.autoNeg = true;
+    if_port.phy_config.phyAddr = PHY_ADDRESS;
+    if_port.srcClock_Hz = ENET_CLOCK_FREQ;
+    if_port.phy_autonego_timeout_count = PHY_AUTONEGO_TIMEOUT_COUNT;
+    if_port.phy_stability_delay_us = PHY_STABILITY_DELAY_US;
+}
+
+struct netif netif_mini;
+
+static err_t netif_set_opts(struct netif *netif) {
+  netif->linkoutput = netif_output;
+  netif->output     = etharp_output;
+  netif->mtu        = 1500;
+  netif->flags      = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET;
+  netif->hwaddr_len = 6;
+  netif->hwaddr[0] = configMAC_ADDR0;
+  netif->hwaddr[1] = configMAC_ADDR1;
+  netif->hwaddr[2] = configMAC_ADDR2;
+  netif->hwaddr[3] = configMAC_ADDR3;
+  netif->hwaddr[4] = configMAC_ADDR4;
+  netif->hwaddr[5] = configMAC_ADDR5;
+  netif->name[0]   = IFNAME0;
+  netif->name[1]   = IFNAME1;
+
+  return ERR_OK;
+}
+
+/*!
+ * @brief Main function.
+ */
+int main(void)
+{
+    ip4_addr_t netif_ipaddr;
+    ip4_addr_t netif_netmask;
+    ip4_addr_t netif_gw;
+
+    /* Hardware Initialization. */
+    BOARD_InitMemory();
+    BOARD_RdcInit();
+    BOARD_InitPins();
+    BOARD_BootClockRUN();
+    BOARD_InitDebugConsole();
+
+    CLOCK_SetRootDivider(kCLOCK_RootEnetAxi, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetAxi, kCLOCK_EnetAxiRootmuxSysPll2Div4); /* SYSTEM PLL2 divided by 4: 250Mhz */
+
+    /* Time stamp clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetTimer, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetTimer, kCLOCK_EnetTimerRootmuxSysPll2Div10); /* SYSTEM PLL2 divided by 10: 100Mhz */
+
+    /* mii/rgmii interface clock */
+    CLOCK_SetRootDivider(kCLOCK_RootEnetRef, 1U, 1U);
+    CLOCK_SetRootMux(kCLOCK_RootEnetRef, kCLOCK_EnetRefRootmuxSysPll2Div8); /* SYSTEM PLL2 divided by 8: 125MHz */
+
+    gpio_pin_config_t gpio_config = {kGPIO_DigitalOutput, 0, kGPIO_NoIntmode};
+
+    /* PHY reset pin */
+    GPIO_PinInit(GPIO4, 22, &gpio_config);
+
+    /* PHY reset */
+    GPIO_WritePinOutput(GPIO4, 22, 0);
+    SDK_DelayAtLeastUs(10000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+    GPIO_WritePinOutput(GPIO4, 22, 1);
+    SDK_DelayAtLeastUs(30000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
+
+    /* used by TCP */
+    osal_timer_init();
+
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done1_IRQn);
+    EnableIRQ(ENET_MAC0_Rx_Tx_Done2_IRQn);
+
+    IP4_ADDR(&netif_ipaddr, configIP_ADDR0, configIP_ADDR1, configIP_ADDR2, configIP_ADDR3);
+    IP4_ADDR(&netif_netmask, configNET_MASK0, configNET_MASK1, configNET_MASK2, configNET_MASK3);
+    IP4_ADDR(&netif_gw, configGW_ADDR0, configGW_ADDR1, configGW_ADDR2, configGW_ADDR3);
+
+    ethernetif_config();
+    ethernetif_init(myMAC);
+
+    printf("Ethernet initialization done!\n");
+
+    lwip_init();
+
+    netif_add(&netif_mini, &netif_ipaddr, &netif_netmask, &netif_gw, NULL, netif_set_opts, netif_input);
+
+    netif_set_default(&netif_mini);
+    netif_set_up(&netif_mini);
+
+    /* echoes on UDP port 7 */
+    udpecho_raw_init();
+    /* echoes on TCP port 7 */
+    tcpecho_raw_init();
+
+    printf("I'm ready to respond to UDP/TCP packets! \n");
+
+    while(1) {
+        /* must be called repeatedly in bare-metal implementations */
+        ethernetif_receive(&netif_mini);
+        sys_check_timeouts();
+    }
+
+    return 0;
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.c b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.c
new file mode 100644
index 000000000..6f465afb4
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.c
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include "fsl_common.h"
+#include "fsl_iomuxc.h"
+#include "pin_mux.h"
+
+void BOARD_InitBootPins(void)
+{
+    BOARD_InitPins();
+}
+
+void BOARD_InitPins(void) {
+    IOMUXC_SetPinMux(IOMUXC_UART4_RXD_UART4_RX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_RXD_UART4_RX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+    IOMUXC_SetPinMux(IOMUXC_UART4_TXD_UART4_TX, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_UART4_TXD_UART4_TX,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(6U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDIO_ENET1_MDIO, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDIO_ENET1_MDIO,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_MDC_ENET1_MDC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_MDC_ENET1_MDC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD3_ENET1_RGMII_TD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD3_ENET1_RGMII_TD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD2_ENET1_RGMII_TD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD2_ENET1_RGMII_TD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD1_ENET1_RGMII_TD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD1_ENET1_RGMII_TD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TD0_ENET1_RGMII_TD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TD0_ENET1_RGMII_TD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD3_ENET1_RGMII_RD3, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD3_ENET1_RGMII_RD3,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD2_ENET1_RGMII_RD2, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD2_ENET1_RGMII_RD2,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD1_ENET1_RGMII_RD1, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD1_ENET1_RGMII_RD1,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RD0_ENET1_RGMII_RD0, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RD0_ENET1_RGMII_RD0,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_TXC_ENET1_RGMII_TXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TXC_ENET1_RGMII_TXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_RXC_ENET1_RGMII_RXC, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RXC_ENET1_RGMII_RXC,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+
+    IOMUXC_SetPinMux(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(2U) |
+                        IOMUXC_SW_PAD_CTL_PAD_HYS(1U));
+    IOMUXC_SetPinMux(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL, 0U);
+    IOMUXC_SetPinConfig(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(7U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+
+    IOMUXC_SetPinMux(IOMUXC_SAI2_RXC_GPIO4_IO22, 5U);
+    IOMUXC_SetPinConfig(IOMUXC_SAI2_RXC_GPIO4_IO22,
+                        IOMUXC_SW_PAD_CTL_PAD_DSE(1U) |
+                        IOMUXC_SW_PAD_CTL_PAD_FSEL(3U));
+}
diff --git a/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.h b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.h
new file mode 100644
index 000000000..68b6a81b4
--- /dev/null
+++ b/evkmimx8mm/lwip_examples/lwip_tcp_udp_responder/bm/pin_mux.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2022, NXP
+ * All rights reserved.
+ *
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef _PIN_MUX_H_
+#define _PIN_MUX_H_
+
+#include "board.h"
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+void BOARD_InitBootPins(void);
+
+void BOARD_InitPins(void);
+
+#if defined(__cplusplus)
+}
+#endif
+
+#endif /* _PIN_MUX_H_ */
